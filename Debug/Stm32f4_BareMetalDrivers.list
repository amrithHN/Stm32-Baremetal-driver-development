
Stm32f4_BareMetalDrivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bac  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000d54  08000d54  00010d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d60  08000d60  00010d68  2**0
                  CONTENTS
  4 .ARM          00000000  08000d60  08000d60  00010d68  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d60  08000d68  00010d68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d60  08000d60  00010d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d64  08000d64  00010d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010d68  2**0
                  CONTENTS
 10 .bss          0000003c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000003c  2000003c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010d68  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014e7  00000000  00000000  00010d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005a2  00000000  00000000  00012279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  00012820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000148  00000000  00000000  000129a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020e2  00000000  00000000  00012ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001881  00000000  00000000  00014bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000837f  00000000  00000000  0001644b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001e7ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000568  00000000  00000000  0001e81c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000d3c 	.word	0x08000d3c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000d3c 	.word	0x08000d3c

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <Pin_init>:
//SPI2 MISO PB14
//SPI2 SCk PB13
//spi2 nss PB12
//AF mode 5

void Pin_init(){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIO_handle_t Spi2_handle;

	Spi2_handle.pGPIOx = GPIOB;
 80001fe:	4b13      	ldr	r3, [pc, #76]	; (800024c <Pin_init+0x54>)
 8000200:	607b      	str	r3, [r7, #4]
	Spi2_handle.pin_config.pin_alternate_function = 5;
 8000202:	2305      	movs	r3, #5
 8000204:	737b      	strb	r3, [r7, #13]
	Spi2_handle.pin_config.pin_speed = HIGH;
 8000206:	2302      	movs	r3, #2
 8000208:	733b      	strb	r3, [r7, #12]
	Spi2_handle.pin_config.pin_mode = ALT_FUNC;
 800020a:	2302      	movs	r3, #2
 800020c:	727b      	strb	r3, [r7, #9]
	Spi2_handle.pin_config.pin_input_mode = NOPULL;
 800020e:	2300      	movs	r3, #0
 8000210:	72bb      	strb	r3, [r7, #10]

	//SPI2 MOSI PB15
	Spi2_handle.pin_config.pin_number = 15;
 8000212:	230f      	movs	r3, #15
 8000214:	723b      	strb	r3, [r7, #8]
	GPIO_init(&Spi2_handle);
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f917 	bl	800044c <GPIO_init>

	//SPI2 MISO PB14
	Spi2_handle.pin_config.pin_number = 13;
 800021e:	230d      	movs	r3, #13
 8000220:	723b      	strb	r3, [r7, #8]
	GPIO_init(&Spi2_handle);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f911 	bl	800044c <GPIO_init>

	//SPI2 SCk PB13
	Spi2_handle.pin_config.pin_number = 12;
 800022a:	230c      	movs	r3, #12
 800022c:	723b      	strb	r3, [r7, #8]
	GPIO_init(&Spi2_handle);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f90b 	bl	800044c <GPIO_init>

	//spi2 nss PB12
	Spi2_handle.pin_config.pin_number = 14;
 8000236:	230e      	movs	r3, #14
 8000238:	723b      	strb	r3, [r7, #8]
	GPIO_init(&Spi2_handle);
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	4618      	mov	r0, r3
 800023e:	f000 f905 	bl	800044c <GPIO_init>



}
 8000242:	bf00      	nop
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40020400 	.word	0x40020400

08000250 <spi_conf>:
SPI_handle_t pSPIx ;

void spi_conf(){
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0



	pSPIx.pSPIx = SPI2;
 8000256:	4b1c      	ldr	r3, [pc, #112]	; (80002c8 <spi_conf+0x78>)
 8000258:	4a1c      	ldr	r2, [pc, #112]	; (80002cc <spi_conf+0x7c>)
 800025a:	601a      	str	r2, [r3, #0]
	pSPIx.SPI_config.Mode = SPI_MASTER;
 800025c:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <spi_conf+0x78>)
 800025e:	2201      	movs	r2, #1
 8000260:	711a      	strb	r2, [r3, #4]
	pSPIx.SPI_config.Bus_config = DUPLEX;
 8000262:	4b19      	ldr	r3, [pc, #100]	; (80002c8 <spi_conf+0x78>)
 8000264:	2200      	movs	r2, #0
 8000266:	715a      	strb	r2, [r3, #5]
	pSPIx.SPI_config.speed = BRR_2;
 8000268:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <spi_conf+0x78>)
 800026a:	2200      	movs	r2, #0
 800026c:	729a      	strb	r2, [r3, #10]
	pSPIx.SPI_config.SSM = SOFTWARE_MGT;
 800026e:	4b16      	ldr	r3, [pc, #88]	; (80002c8 <spi_conf+0x78>)
 8000270:	2201      	movs	r2, #1
 8000272:	725a      	strb	r2, [r3, #9]
	pSPIx.SPI_config.DFF = DFF_8;
 8000274:	4b14      	ldr	r3, [pc, #80]	; (80002c8 <spi_conf+0x78>)
 8000276:	2200      	movs	r2, #0
 8000278:	719a      	strb	r2, [r3, #6]
	pSPIx.SPI_config.CPOL = IDLE_MODE_HIGH;
 800027a:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <spi_conf+0x78>)
 800027c:	2201      	movs	r2, #1
 800027e:	721a      	strb	r2, [r3, #8]
	pSPIx.SPI_config.CPHA = LEADING_EDGE;
 8000280:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <spi_conf+0x78>)
 8000282:	2200      	movs	r2, #0
 8000284:	71da      	strb	r2, [r3, #7]


	SPI_init(&pSPIx);
 8000286:	4810      	ldr	r0, [pc, #64]	; (80002c8 <spi_conf+0x78>)
 8000288:	f000 fb5b 	bl	8000942 <SPI_init>
	char str[]="Hello World";
 800028c:	4a10      	ldr	r2, [pc, #64]	; (80002d0 <spi_conf+0x80>)
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	ca07      	ldmia	r2, {r0, r1, r2}
 8000292:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	pSPIx.TxState = SPI_IDLE;
 8000296:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <spi_conf+0x78>)
 8000298:	2200      	movs	r2, #0
 800029a:	771a      	strb	r2, [r3, #28]
	pSPIx.RxState = SPI_IDLE;
 800029c:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <spi_conf+0x78>)
 800029e:	2200      	movs	r2, #0
 80002a0:	775a      	strb	r2, [r3, #29]
	SPI_IRQConfig(&pSPIx, ENABLE);
 80002a2:	2101      	movs	r1, #1
 80002a4:	4808      	ldr	r0, [pc, #32]	; (80002c8 <spi_conf+0x78>)
 80002a6:	f000 fc2d 	bl	8000b04 <SPI_IRQConfig>


	SPI_txData_IT(&pSPIx,(uint8_t *)str,strlen(str));
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff9b 	bl	80001e8 <strlen>
 80002b2:	4602      	mov	r2, r0
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	4619      	mov	r1, r3
 80002b8:	4803      	ldr	r0, [pc, #12]	; (80002c8 <spi_conf+0x78>)
 80002ba:	f000 fbab 	bl	8000a14 <SPI_txData_IT>

}
 80002be:	bf00      	nop
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	2000001c 	.word	0x2000001c
 80002cc:	40003800 	.word	0x40003800
 80002d0:	08000d54 	.word	0x08000d54

080002d4 <main>:

int main(){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0



	Pin_init();
 80002d8:	f7ff ff8e 	bl	80001f8 <Pin_init>
	spi_conf();
 80002dc:	f7ff ffb8 	bl	8000250 <spi_conf>





	while(1)
 80002e0:	e7fe      	b.n	80002e0 <main+0xc>
	...

080002e4 <SPI2_IRQHandler>:

	}
}


void SPI2_IRQHandler(void){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0

	SPI_IRQHadling(&pSPIx);
 80002e8:	4802      	ldr	r0, [pc, #8]	; (80002f4 <SPI2_IRQHandler+0x10>)
 80002ea:	f000 fbba 	bl	8000a62 <SPI_IRQHadling>
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f8:	480d      	ldr	r0, [pc, #52]	; (8000330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <LoopForever+0x6>)
  ldr r1, =_edata
 8000302:	490d      	ldr	r1, [pc, #52]	; (8000338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <LoopForever+0xe>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000318:	4c0a      	ldr	r4, [pc, #40]	; (8000344 <LoopForever+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000326:	f000 fce5 	bl	8000cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032a:	f7ff ffd3 	bl	80002d4 <main>

0800032e <LoopForever>:

LoopForever:
    b LoopForever
 800032e:	e7fe      	b.n	800032e <LoopForever>
  ldr   r0, =_estack
 8000330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000338:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800033c:	08000d68 	.word	0x08000d68
  ldr r2, =_sbss
 8000340:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000344:	2000003c 	.word	0x2000003c

08000348 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC_IRQHandler>
	...

0800034c <GPIO_Enable>:
 * @return            -  none
 *
 * @Note              -  none
 */

void GPIO_Enable(GPIO_Reg_Def* pGPIOx,uint8_t flag){
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	70fb      	strb	r3, [r7, #3]

			if(pGPIOx==GPIOA){
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a36      	ldr	r2, [pc, #216]	; (8000434 <GPIO_Enable+0xe8>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d110      	bne.n	8000382 <GPIO_Enable+0x36>

				flag?GPIOA_EN(): GPIOA_DI();
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d006      	beq.n	8000374 <GPIO_Enable+0x28>
 8000366:	4b34      	ldr	r3, [pc, #208]	; (8000438 <GPIO_Enable+0xec>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036a:	4a33      	ldr	r2, [pc, #204]	; (8000438 <GPIO_Enable+0xec>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6313      	str	r3, [r2, #48]	; 0x30
			else if(pGPIOx==GPIOE)
			{
				flag?GPIOE_EN(): GPIOE_DI();
			}

}
 8000372:	e059      	b.n	8000428 <GPIO_Enable+0xdc>
				flag?GPIOA_EN(): GPIOA_DI();
 8000374:	4b30      	ldr	r3, [pc, #192]	; (8000438 <GPIO_Enable+0xec>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	4a2f      	ldr	r2, [pc, #188]	; (8000438 <GPIO_Enable+0xec>)
 800037a:	f023 0301 	bic.w	r3, r3, #1
 800037e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000380:	e052      	b.n	8000428 <GPIO_Enable+0xdc>
			else if(pGPIOx==GPIOB)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a2d      	ldr	r2, [pc, #180]	; (800043c <GPIO_Enable+0xf0>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d110      	bne.n	80003ac <GPIO_Enable+0x60>
				flag?GPIOB_EN(): GPIOB_DI();
 800038a:	78fb      	ldrb	r3, [r7, #3]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d006      	beq.n	800039e <GPIO_Enable+0x52>
 8000390:	4b29      	ldr	r3, [pc, #164]	; (8000438 <GPIO_Enable+0xec>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000394:	4a28      	ldr	r2, [pc, #160]	; (8000438 <GPIO_Enable+0xec>)
 8000396:	f043 0302 	orr.w	r3, r3, #2
 800039a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039c:	e044      	b.n	8000428 <GPIO_Enable+0xdc>
				flag?GPIOB_EN(): GPIOB_DI();
 800039e:	4b26      	ldr	r3, [pc, #152]	; (8000438 <GPIO_Enable+0xec>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a2:	4a25      	ldr	r2, [pc, #148]	; (8000438 <GPIO_Enable+0xec>)
 80003a4:	f023 0302 	bic.w	r3, r3, #2
 80003a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003aa:	e03d      	b.n	8000428 <GPIO_Enable+0xdc>
			else if(pGPIOx==GPIOC)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a24      	ldr	r2, [pc, #144]	; (8000440 <GPIO_Enable+0xf4>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d110      	bne.n	80003d6 <GPIO_Enable+0x8a>
				flag?GPIOC_EN(): GPIOC_DI();
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d006      	beq.n	80003c8 <GPIO_Enable+0x7c>
 80003ba:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <GPIO_Enable+0xec>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a1e      	ldr	r2, [pc, #120]	; (8000438 <GPIO_Enable+0xec>)
 80003c0:	f043 0304 	orr.w	r3, r3, #4
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c6:	e02f      	b.n	8000428 <GPIO_Enable+0xdc>
				flag?GPIOC_EN(): GPIOC_DI();
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <GPIO_Enable+0xec>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4a1a      	ldr	r2, [pc, #104]	; (8000438 <GPIO_Enable+0xec>)
 80003ce:	f023 0304 	bic.w	r3, r3, #4
 80003d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d4:	e028      	b.n	8000428 <GPIO_Enable+0xdc>
			else if(pGPIOx==GPIOD)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a1a      	ldr	r2, [pc, #104]	; (8000444 <GPIO_Enable+0xf8>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d110      	bne.n	8000400 <GPIO_Enable+0xb4>
				flag?GPIOD_EN(): GPIOD_DI();
 80003de:	78fb      	ldrb	r3, [r7, #3]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d006      	beq.n	80003f2 <GPIO_Enable+0xa6>
 80003e4:	4b14      	ldr	r3, [pc, #80]	; (8000438 <GPIO_Enable+0xec>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e8:	4a13      	ldr	r2, [pc, #76]	; (8000438 <GPIO_Enable+0xec>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f0:	e01a      	b.n	8000428 <GPIO_Enable+0xdc>
				flag?GPIOD_EN(): GPIOD_DI();
 80003f2:	4b11      	ldr	r3, [pc, #68]	; (8000438 <GPIO_Enable+0xec>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f6:	4a10      	ldr	r2, [pc, #64]	; (8000438 <GPIO_Enable+0xec>)
 80003f8:	f023 0308 	bic.w	r3, r3, #8
 80003fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fe:	e013      	b.n	8000428 <GPIO_Enable+0xdc>
			else if(pGPIOx==GPIOE)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a11      	ldr	r2, [pc, #68]	; (8000448 <GPIO_Enable+0xfc>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d10f      	bne.n	8000428 <GPIO_Enable+0xdc>
				flag?GPIOE_EN(): GPIOE_DI();
 8000408:	78fb      	ldrb	r3, [r7, #3]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d006      	beq.n	800041c <GPIO_Enable+0xd0>
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <GPIO_Enable+0xec>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000412:	4a09      	ldr	r2, [pc, #36]	; (8000438 <GPIO_Enable+0xec>)
 8000414:	f043 0310 	orr.w	r3, r3, #16
 8000418:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041a:	e005      	b.n	8000428 <GPIO_Enable+0xdc>
				flag?GPIOE_EN(): GPIOE_DI();
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <GPIO_Enable+0xec>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a05      	ldr	r2, [pc, #20]	; (8000438 <GPIO_Enable+0xec>)
 8000422:	f023 0310 	bic.w	r3, r3, #16
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40020000 	.word	0x40020000
 8000438:	40023800 	.word	0x40023800
 800043c:	40020400 	.word	0x40020400
 8000440:	40020800 	.word	0x40020800
 8000444:	40020c00 	.word	0x40020c00
 8000448:	40021000 	.word	0x40021000

0800044c <GPIO_init>:
 *
 * @return            -  none
 *
 * @Note              -  none
 */
void GPIO_init(GPIO_handle_t* pGPIO_handle){
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]


	GPIO_Enable(pGPIO_handle->pGPIOx,ENABLE);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2101      	movs	r1, #1
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff76 	bl	800034c <GPIO_Enable>

	if(pGPIO_handle->pin_config.pin_mode<=3)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	795b      	ldrb	r3, [r3, #5]
 8000464:	2b03      	cmp	r3, #3
 8000466:	f200 8084 	bhi.w	8000572 <GPIO_init+0x126>
	{
	//MODER
		uint32_t temp = pGPIO_handle->pin_config.pin_mode<<(2*pGPIO_handle->pin_config.pin_number);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	795b      	ldrb	r3, [r3, #5]
 800046e:	461a      	mov	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	791b      	ldrb	r3, [r3, #4]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	fa02 f303 	lsl.w	r3, r2, r3
 800047a:	613b      	str	r3, [r7, #16]
		pGPIO_handle->pGPIOx->MODER|=temp;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	6819      	ldr	r1, [r3, #0]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	693a      	ldr	r2, [r7, #16]
 8000488:	430a      	orrs	r2, r1
 800048a:	601a      	str	r2, [r3, #0]
	//SPEED
		temp = pGPIO_handle->pin_config.pin_speed<<(2*pGPIO_handle->pin_config.pin_number);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	7a1b      	ldrb	r3, [r3, #8]
 8000490:	461a      	mov	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791b      	ldrb	r3, [r3, #4]
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	fa02 f303 	lsl.w	r3, r2, r3
 800049c:	613b      	str	r3, [r7, #16]
		pGPIO_handle->pGPIOx->OSPEEDR|=temp;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	6899      	ldr	r1, [r3, #8]
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	693a      	ldr	r2, [r7, #16]
 80004aa:	430a      	orrs	r2, r1
 80004ac:	609a      	str	r2, [r3, #8]

	//OUPUT type
		if(pGPIO_handle->pin_config.pin_mode==OUTPUT)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	795b      	ldrb	r3, [r3, #5]
 80004b2:	2b01      	cmp	r3, #1
 80004b4:	d10f      	bne.n	80004d6 <GPIO_init+0x8a>
		{
			temp = pGPIO_handle->pin_config.pin_output_mode<<(pGPIO_handle->pin_config.pin_number);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	79db      	ldrb	r3, [r3, #7]
 80004ba:	461a      	mov	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	791b      	ldrb	r3, [r3, #4]
 80004c0:	fa02 f303 	lsl.w	r3, r2, r3
 80004c4:	613b      	str	r3, [r7, #16]
			pGPIO_handle->pGPIOx->OTYPER|=temp;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	6859      	ldr	r1, [r3, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	693a      	ldr	r2, [r7, #16]
 80004d2:	430a      	orrs	r2, r1
 80004d4:	605a      	str	r2, [r3, #4]
		}

	//INPUT pull type
		if(pGPIO_handle->pin_config.pin_mode==INPUT)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	795b      	ldrb	r3, [r3, #5]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d110      	bne.n	8000500 <GPIO_init+0xb4>
		{
				temp = pGPIO_handle->pin_config.pin_input_mode<<(2*pGPIO_handle->pin_config.pin_number);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	799b      	ldrb	r3, [r3, #6]
 80004e2:	461a      	mov	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	fa02 f303 	lsl.w	r3, r2, r3
 80004ee:	613b      	str	r3, [r7, #16]
				pGPIO_handle->pGPIOx->PUPDR|=temp;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	68d9      	ldr	r1, [r3, #12]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	693a      	ldr	r2, [r7, #16]
 80004fc:	430a      	orrs	r2, r1
 80004fe:	60da      	str	r2, [r3, #12]
		}

	//Alternate function
		if(pGPIO_handle->pin_config.pin_mode == ALT_FUNC)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	795b      	ldrb	r3, [r3, #5]
 8000504:	2b02      	cmp	r3, #2
 8000506:	f040 80d1 	bne.w	80006ac <GPIO_init+0x260>
		{

				//less -- 0..7
				uint32_t temp1 = pGPIO_handle->pin_config.pin_number/8;
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	08db      	lsrs	r3, r3, #3
 8000510:	b2db      	uxtb	r3, r3
 8000512:	60fb      	str	r3, [r7, #12]
				uint32_t temp2 = pGPIO_handle->pin_config.pin_number%8;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	f003 0307 	and.w	r3, r3, #7
 800051c:	60bb      	str	r3, [r7, #8]
				pGPIO_handle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) );//clear
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	3208      	adds	r2, #8
 8000526:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	210f      	movs	r1, #15
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
 8000534:	43db      	mvns	r3, r3
 8000536:	4619      	mov	r1, r3
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4011      	ands	r1, r2
 800053e:	68fa      	ldr	r2, [r7, #12]
 8000540:	3208      	adds	r2, #8
 8000542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				pGPIO_handle->pGPIOx->AFR[temp1] |= pGPIO_handle->pin_config.pin_alternate_function<<(4*temp2);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	3208      	adds	r2, #8
 800054e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	7a5b      	ldrb	r3, [r3, #9]
 8000556:	4619      	mov	r1, r3
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	fa01 f303 	lsl.w	r3, r1, r3
 8000560:	4619      	mov	r1, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4311      	orrs	r1, r2
 8000568:	68fa      	ldr	r2, [r7, #12]
 800056a:	3208      	adds	r2, #8
 800056c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}



}
 8000570:	e09c      	b.n	80006ac <GPIO_init+0x260>
		if(pGPIO_handle->pin_config.pin_mode == INTERRUPT_FT)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	795b      	ldrb	r3, [r3, #5]
 8000576:	2b04      	cmp	r3, #4
 8000578:	d117      	bne.n	80005aa <GPIO_init+0x15e>
			EXTI->EXTI_FTSR |= (1<<pGPIO_handle->pin_config.pin_number); // enable Falling edge
 800057a:	4b4e      	ldr	r3, [pc, #312]	; (80006b4 <GPIO_init+0x268>)
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	7912      	ldrb	r2, [r2, #4]
 8000582:	4611      	mov	r1, r2
 8000584:	2201      	movs	r2, #1
 8000586:	408a      	lsls	r2, r1
 8000588:	4611      	mov	r1, r2
 800058a:	4a4a      	ldr	r2, [pc, #296]	; (80006b4 <GPIO_init+0x268>)
 800058c:	430b      	orrs	r3, r1
 800058e:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR &= ~(1<<pGPIO_handle->pin_config.pin_number); // disable rising edge
 8000590:	4b48      	ldr	r3, [pc, #288]	; (80006b4 <GPIO_init+0x268>)
 8000592:	689b      	ldr	r3, [r3, #8]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	7912      	ldrb	r2, [r2, #4]
 8000598:	4611      	mov	r1, r2
 800059a:	2201      	movs	r2, #1
 800059c:	408a      	lsls	r2, r1
 800059e:	43d2      	mvns	r2, r2
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a44      	ldr	r2, [pc, #272]	; (80006b4 <GPIO_init+0x268>)
 80005a4:	400b      	ands	r3, r1
 80005a6:	6093      	str	r3, [r2, #8]
 80005a8:	e035      	b.n	8000616 <GPIO_init+0x1ca>
		else if(pGPIO_handle->pin_config.pin_mode == INTERRUPT_RT)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	795b      	ldrb	r3, [r3, #5]
 80005ae:	2b05      	cmp	r3, #5
 80005b0:	d117      	bne.n	80005e2 <GPIO_init+0x196>
			EXTI->EXTI_RTSR |= (1<<pGPIO_handle->pin_config.pin_number); // enable rising edge
 80005b2:	4b40      	ldr	r3, [pc, #256]	; (80006b4 <GPIO_init+0x268>)
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	7912      	ldrb	r2, [r2, #4]
 80005ba:	4611      	mov	r1, r2
 80005bc:	2201      	movs	r2, #1
 80005be:	408a      	lsls	r2, r1
 80005c0:	4611      	mov	r1, r2
 80005c2:	4a3c      	ldr	r2, [pc, #240]	; (80006b4 <GPIO_init+0x268>)
 80005c4:	430b      	orrs	r3, r1
 80005c6:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR &= ~(1<<pGPIO_handle->pin_config.pin_number); // disable Falling edge
 80005c8:	4b3a      	ldr	r3, [pc, #232]	; (80006b4 <GPIO_init+0x268>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	7912      	ldrb	r2, [r2, #4]
 80005d0:	4611      	mov	r1, r2
 80005d2:	2201      	movs	r2, #1
 80005d4:	408a      	lsls	r2, r1
 80005d6:	43d2      	mvns	r2, r2
 80005d8:	4611      	mov	r1, r2
 80005da:	4a36      	ldr	r2, [pc, #216]	; (80006b4 <GPIO_init+0x268>)
 80005dc:	400b      	ands	r3, r1
 80005de:	60d3      	str	r3, [r2, #12]
 80005e0:	e019      	b.n	8000616 <GPIO_init+0x1ca>
		else if (pGPIO_handle->pin_config.pin_mode == INTERRUPT_FRT)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	795b      	ldrb	r3, [r3, #5]
 80005e6:	2b06      	cmp	r3, #6
 80005e8:	d115      	bne.n	8000616 <GPIO_init+0x1ca>
			EXTI->EXTI_RTSR |= (1<<pGPIO_handle->pin_config.pin_number); // enable rising edge
 80005ea:	4b32      	ldr	r3, [pc, #200]	; (80006b4 <GPIO_init+0x268>)
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	7912      	ldrb	r2, [r2, #4]
 80005f2:	4611      	mov	r1, r2
 80005f4:	2201      	movs	r2, #1
 80005f6:	408a      	lsls	r2, r1
 80005f8:	4611      	mov	r1, r2
 80005fa:	4a2e      	ldr	r2, [pc, #184]	; (80006b4 <GPIO_init+0x268>)
 80005fc:	430b      	orrs	r3, r1
 80005fe:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR |= (1<<pGPIO_handle->pin_config.pin_number); // enable Falling edge
 8000600:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <GPIO_init+0x268>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	7912      	ldrb	r2, [r2, #4]
 8000608:	4611      	mov	r1, r2
 800060a:	2201      	movs	r2, #1
 800060c:	408a      	lsls	r2, r1
 800060e:	4611      	mov	r1, r2
 8000610:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <GPIO_init+0x268>)
 8000612:	430b      	orrs	r3, r1
 8000614:	60d3      	str	r3, [r2, #12]
		uint8_t register_bank = pGPIO_handle->pin_config.pin_number/4 + 1 ;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	089b      	lsrs	r3, r3, #2
 800061c:	b2db      	uxtb	r3, r3
 800061e:	3301      	adds	r3, #1
 8000620:	75fb      	strb	r3, [r7, #23]
		uint8_t section_select = pGPIO_handle->pin_config.pin_number%4;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	f003 0303 	and.w	r3, r3, #3
 800062a:	75bb      	strb	r3, [r7, #22]
		uint8_t temp2 =PORT_NUM_MAP(pGPIO_handle->pGPIOx);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <GPIO_init+0x26c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d01d      	beq.n	8000672 <GPIO_init+0x226>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a20      	ldr	r2, [pc, #128]	; (80006bc <GPIO_init+0x270>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d016      	beq.n	800066e <GPIO_init+0x222>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a1e      	ldr	r2, [pc, #120]	; (80006c0 <GPIO_init+0x274>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d00f      	beq.n	800066a <GPIO_init+0x21e>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a1d      	ldr	r2, [pc, #116]	; (80006c4 <GPIO_init+0x278>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d008      	beq.n	8000666 <GPIO_init+0x21a>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a1b      	ldr	r2, [pc, #108]	; (80006c8 <GPIO_init+0x27c>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d101      	bne.n	8000662 <GPIO_init+0x216>
 800065e:	2304      	movs	r3, #4
 8000660:	e008      	b.n	8000674 <GPIO_init+0x228>
 8000662:	2300      	movs	r3, #0
 8000664:	e006      	b.n	8000674 <GPIO_init+0x228>
 8000666:	2303      	movs	r3, #3
 8000668:	e004      	b.n	8000674 <GPIO_init+0x228>
 800066a:	2302      	movs	r3, #2
 800066c:	e002      	b.n	8000674 <GPIO_init+0x228>
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <GPIO_init+0x228>
 8000672:	2300      	movs	r3, #0
 8000674:	757b      	strb	r3, [r7, #21]
		SYSCFG_EN();
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <GPIO_init+0x280>)
 8000678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067a:	4a14      	ldr	r2, [pc, #80]	; (80006cc <GPIO_init+0x280>)
 800067c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000680:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->SYSCFG_EXTICR[register_bank] =  temp2 <<(4*section_select);
 8000682:	7d7a      	ldrb	r2, [r7, #21]
 8000684:	7dbb      	ldrb	r3, [r7, #22]
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	fa02 f103 	lsl.w	r1, r2, r3
 800068c:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <GPIO_init+0x284>)
 800068e:	7dfb      	ldrb	r3, [r7, #23]
 8000690:	3302      	adds	r3, #2
 8000692:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		EXTI->EXTI_IMR |= (1<<pGPIO_handle->pin_config.pin_number); //not mask the interrupt
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <GPIO_init+0x268>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	7912      	ldrb	r2, [r2, #4]
 800069e:	4611      	mov	r1, r2
 80006a0:	2201      	movs	r2, #1
 80006a2:	408a      	lsls	r2, r1
 80006a4:	4611      	mov	r1, r2
 80006a6:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <GPIO_init+0x268>)
 80006a8:	430b      	orrs	r3, r1
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	3718      	adds	r7, #24
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40013c00 	.word	0x40013c00
 80006b8:	40020000 	.word	0x40020000
 80006bc:	40020400 	.word	0x40020400
 80006c0:	40020800 	.word	0x40020800
 80006c4:	40020c00 	.word	0x40020c00
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40013800 	.word	0x40013800

080006d4 <GPIO_IRQConfig>:

}



void GPIO_IRQConfig(uint8_t IRQnumber,uint8_t flag){
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]

	if(flag){
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d04c      	beq.n	8000784 <GPIO_IRQConfig+0xb0>

		//enable interrupts processor side using ISER0-4
		if(IRQnumber<32)
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b1f      	cmp	r3, #31
 80006ee:	d80a      	bhi.n	8000706 <GPIO_IRQConfig+0x32>
		{
			//0-31 interupts in this ISER0 as given in programming manual 1:enable 0:No effect
			*NVIC_ISER0 |= (1<<IRQnumber);
 80006f0:	4b4e      	ldr	r3, [pc, #312]	; (800082c <GPIO_IRQConfig+0x158>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	79fa      	ldrb	r2, [r7, #7]
 80006f6:	2101      	movs	r1, #1
 80006f8:	fa01 f202 	lsl.w	r2, r1, r2
 80006fc:	4611      	mov	r1, r2
 80006fe:	4a4b      	ldr	r2, [pc, #300]	; (800082c <GPIO_IRQConfig+0x158>)
 8000700:	430b      	orrs	r3, r1
 8000702:	6013      	str	r3, [r2, #0]
			*NVIC_ICER3 |=(1<<IRQnumber%96);
		}
	}


}
 8000704:	e08d      	b.n	8000822 <GPIO_IRQConfig+0x14e>
		else if(IRQnumber>=32 && IRQnumber<=63)
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b1f      	cmp	r3, #31
 800070a:	d90d      	bls.n	8000728 <GPIO_IRQConfig+0x54>
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b3f      	cmp	r3, #63	; 0x3f
 8000710:	d80a      	bhi.n	8000728 <GPIO_IRQConfig+0x54>
			uint32_t temp =(1<<IRQnumber%32);
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	f003 031f 	and.w	r3, r3, #31
 8000718:	2201      	movs	r2, #1
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	60fb      	str	r3, [r7, #12]
			*NVIC_ISER1 = temp;
 8000720:	4a43      	ldr	r2, [pc, #268]	; (8000830 <GPIO_IRQConfig+0x15c>)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	6013      	str	r3, [r2, #0]
		{
 8000726:	e07c      	b.n	8000822 <GPIO_IRQConfig+0x14e>
		else if(IRQnumber>=64 && IRQnumber<=95)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b3f      	cmp	r3, #63	; 0x3f
 800072c:	d90f      	bls.n	800074e <GPIO_IRQConfig+0x7a>
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b5f      	cmp	r3, #95	; 0x5f
 8000732:	d80c      	bhi.n	800074e <GPIO_IRQConfig+0x7a>
			*NVIC_ISER2 |=(1<<IRQnumber%64);
 8000734:	4b3f      	ldr	r3, [pc, #252]	; (8000834 <GPIO_IRQConfig+0x160>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	79fa      	ldrb	r2, [r7, #7]
 800073a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800073e:	2101      	movs	r1, #1
 8000740:	fa01 f202 	lsl.w	r2, r1, r2
 8000744:	4611      	mov	r1, r2
 8000746:	4a3b      	ldr	r2, [pc, #236]	; (8000834 <GPIO_IRQConfig+0x160>)
 8000748:	430b      	orrs	r3, r1
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	e069      	b.n	8000822 <GPIO_IRQConfig+0x14e>
		else if(IRQnumber>=96 && IRQnumber<=127)
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b5f      	cmp	r3, #95	; 0x5f
 8000752:	d966      	bls.n	8000822 <GPIO_IRQConfig+0x14e>
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db62      	blt.n	8000822 <GPIO_IRQConfig+0x14e>
			*NVIC_ISER3 |=(1<<IRQnumber%96);
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <GPIO_IRQConfig+0x164>)
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	79fa      	ldrb	r2, [r7, #7]
 8000762:	4b36      	ldr	r3, [pc, #216]	; (800083c <GPIO_IRQConfig+0x168>)
 8000764:	fba3 1302 	umull	r1, r3, r3, r2
 8000768:	0999      	lsrs	r1, r3, #6
 800076a:	460b      	mov	r3, r1
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	440b      	add	r3, r1
 8000770:	015b      	lsls	r3, r3, #5
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	2301      	movs	r3, #1
 800077a:	4093      	lsls	r3, r2
 800077c:	4a2e      	ldr	r2, [pc, #184]	; (8000838 <GPIO_IRQConfig+0x164>)
 800077e:	4303      	orrs	r3, r0
 8000780:	6013      	str	r3, [r2, #0]
}
 8000782:	e04e      	b.n	8000822 <GPIO_IRQConfig+0x14e>
		if(IRQnumber<32)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	2b1f      	cmp	r3, #31
 8000788:	d80a      	bhi.n	80007a0 <GPIO_IRQConfig+0xcc>
			*NVIC_ICER0 |= (1<<IRQnumber);
 800078a:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <GPIO_IRQConfig+0x16c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	79fa      	ldrb	r2, [r7, #7]
 8000790:	2101      	movs	r1, #1
 8000792:	fa01 f202 	lsl.w	r2, r1, r2
 8000796:	4611      	mov	r1, r2
 8000798:	4a29      	ldr	r2, [pc, #164]	; (8000840 <GPIO_IRQConfig+0x16c>)
 800079a:	430b      	orrs	r3, r1
 800079c:	6013      	str	r3, [r2, #0]
}
 800079e:	e040      	b.n	8000822 <GPIO_IRQConfig+0x14e>
		else if(IRQnumber>=32 && IRQnumber<=63)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	2b1f      	cmp	r3, #31
 80007a4:	d90f      	bls.n	80007c6 <GPIO_IRQConfig+0xf2>
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b3f      	cmp	r3, #63	; 0x3f
 80007aa:	d80c      	bhi.n	80007c6 <GPIO_IRQConfig+0xf2>
			*NVIC_ICER1 |=(1<<IRQnumber%32);
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <GPIO_IRQConfig+0x170>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	79fa      	ldrb	r2, [r7, #7]
 80007b2:	f002 021f 	and.w	r2, r2, #31
 80007b6:	2101      	movs	r1, #1
 80007b8:	fa01 f202 	lsl.w	r2, r1, r2
 80007bc:	4611      	mov	r1, r2
 80007be:	4a21      	ldr	r2, [pc, #132]	; (8000844 <GPIO_IRQConfig+0x170>)
 80007c0:	430b      	orrs	r3, r1
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	e02d      	b.n	8000822 <GPIO_IRQConfig+0x14e>
		else if(IRQnumber>=64 && IRQnumber<=95)
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b3f      	cmp	r3, #63	; 0x3f
 80007ca:	d90f      	bls.n	80007ec <GPIO_IRQConfig+0x118>
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b5f      	cmp	r3, #95	; 0x5f
 80007d0:	d80c      	bhi.n	80007ec <GPIO_IRQConfig+0x118>
			*NVIC_ICER2 |=(1<<IRQnumber%64);
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <GPIO_IRQConfig+0x174>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	79fa      	ldrb	r2, [r7, #7]
 80007d8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80007dc:	2101      	movs	r1, #1
 80007de:	fa01 f202 	lsl.w	r2, r1, r2
 80007e2:	4611      	mov	r1, r2
 80007e4:	4a18      	ldr	r2, [pc, #96]	; (8000848 <GPIO_IRQConfig+0x174>)
 80007e6:	430b      	orrs	r3, r1
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	e01a      	b.n	8000822 <GPIO_IRQConfig+0x14e>
		else if(IRQnumber>=96 && IRQnumber<=127)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b5f      	cmp	r3, #95	; 0x5f
 80007f0:	d917      	bls.n	8000822 <GPIO_IRQConfig+0x14e>
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	db13      	blt.n	8000822 <GPIO_IRQConfig+0x14e>
			*NVIC_ICER3 |=(1<<IRQnumber%96);
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <GPIO_IRQConfig+0x178>)
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	79fa      	ldrb	r2, [r7, #7]
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <GPIO_IRQConfig+0x168>)
 8000802:	fba3 1302 	umull	r1, r3, r3, r2
 8000806:	0999      	lsrs	r1, r3, #6
 8000808:	460b      	mov	r3, r1
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	440b      	add	r3, r1
 800080e:	015b      	lsls	r3, r3, #5
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	b2db      	uxtb	r3, r3
 8000814:	461a      	mov	r2, r3
 8000816:	2301      	movs	r3, #1
 8000818:	4093      	lsls	r3, r2
 800081a:	4a0c      	ldr	r2, [pc, #48]	; (800084c <GPIO_IRQConfig+0x178>)
 800081c:	4303      	orrs	r3, r0
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	e7ff      	b.n	8000822 <GPIO_IRQConfig+0x14e>
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	e000e100 	.word	0xe000e100
 8000830:	e000e104 	.word	0xe000e104
 8000834:	e000e108 	.word	0xe000e108
 8000838:	e000e10f 	.word	0xe000e10f
 800083c:	aaaaaaab 	.word	0xaaaaaaab
 8000840:	e000e180 	.word	0xe000e180
 8000844:	e000e184 	.word	0xe000e184
 8000848:	e000e188 	.word	0xe000e188
 800084c:	e000e18c 	.word	0xe000e18c

08000850 <SPI_CLK_EN>:

static void SPI_tx_handle(SPI_handle_t* SPI_handle); //handle tx interrupt
static void SPI_rx_handle(SPI_handle_t* SPI_handle); //handle rx interrupt
static void SPI_err_handle(SPI_handle_t* SPI_handle); //handle errors during SPI interrupt

void SPI_CLK_EN(SPI_handle_t* SPI_handle,uint8_t flag){
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]

	if(flag)
 800085c:	78fb      	ldrb	r3, [r7, #3]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d021      	beq.n	80008a6 <SPI_CLK_EN+0x56>
	{
			if(SPI_handle->pSPIx == SPI1)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a23      	ldr	r2, [pc, #140]	; (80008f4 <SPI_CLK_EN+0xa4>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d105      	bne.n	8000878 <SPI_CLK_EN+0x28>
			{
				RCC->APB2_ENR |= 1<<12;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <SPI_CLK_EN+0xa8>)
 800086e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000870:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <SPI_CLK_EN+0xa8>)
 8000872:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000876:	6453      	str	r3, [r2, #68]	; 0x44

			}
			if(SPI_handle->pSPIx == SPI2)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a1f      	ldr	r2, [pc, #124]	; (80008fc <SPI_CLK_EN+0xac>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d105      	bne.n	800088e <SPI_CLK_EN+0x3e>
			{
				RCC->APB1_ENR |= 1<<14;
 8000882:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <SPI_CLK_EN+0xa8>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <SPI_CLK_EN+0xa8>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088c:	6413      	str	r3, [r2, #64]	; 0x40
			}
			if(SPI_handle->pSPIx == SPI3)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a1b      	ldr	r2, [pc, #108]	; (8000900 <SPI_CLK_EN+0xb0>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d127      	bne.n	80008e8 <SPI_CLK_EN+0x98>
			{
				RCC->APB1_ENR |= 1<<15;
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <SPI_CLK_EN+0xa8>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a16      	ldr	r2, [pc, #88]	; (80008f8 <SPI_CLK_EN+0xa8>)
 800089e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
		if(SPI_handle->pSPIx == SPI3)
		{
			RCC->APB1_ENR &= ~(1<<15);
		}
	}
}
 80008a4:	e020      	b.n	80008e8 <SPI_CLK_EN+0x98>
		if(SPI_handle->pSPIx == SPI1)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <SPI_CLK_EN+0xa4>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d105      	bne.n	80008bc <SPI_CLK_EN+0x6c>
			RCC->APB2_ENR &= ~(1<<12);
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <SPI_CLK_EN+0xa8>)
 80008b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b4:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <SPI_CLK_EN+0xa8>)
 80008b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008ba:	6453      	str	r3, [r2, #68]	; 0x44
		if(SPI_handle->pSPIx == SPI2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <SPI_CLK_EN+0xac>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d105      	bne.n	80008d2 <SPI_CLK_EN+0x82>
			RCC->APB1_ENR &= ~(1<<14);
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <SPI_CLK_EN+0xa8>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <SPI_CLK_EN+0xa8>)
 80008cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
		if(SPI_handle->pSPIx == SPI3)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <SPI_CLK_EN+0xb0>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d105      	bne.n	80008e8 <SPI_CLK_EN+0x98>
			RCC->APB1_ENR &= ~(1<<15);
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <SPI_CLK_EN+0xa8>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <SPI_CLK_EN+0xa8>)
 80008e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40013000 	.word	0x40013000
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40003800 	.word	0x40003800
 8000900:	40003c00 	.word	0x40003c00

08000904 <SPI_ssi_en>:


void SPI_ssi_en(SPI_handle_t* SPI_handle, uint8_t flag)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	460b      	mov	r3, r1
 800090e:	70fb      	strb	r3, [r7, #3]
	if(flag)
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d008      	beq.n	8000928 <SPI_ssi_en+0x24>
	{

		SPI_handle->pSPIx->CR1 |= (1<<8); //set ssi
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000924:	601a      	str	r2, [r3, #0]
	}
	else{
		SPI_handle->pSPIx->CR1 &= ~(1<<8);
	}
}
 8000926:	e007      	b.n	8000938 <SPI_ssi_en+0x34>
		SPI_handle->pSPIx->CR1 &= ~(1<<8);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000936:	601a      	str	r2, [r3, #0]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <SPI_init>:

void SPI_init(SPI_handle_t* SPI_handle){
 8000942:	b580      	push	{r7, lr}
 8000944:	b084      	sub	sp, #16
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]



 //master 0 slave 1 page 917
	uint32_t temp=0;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]

	SPI_CLK_EN(SPI_handle, ENABLE);
 800094e:	2101      	movs	r1, #1
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff7d 	bl	8000850 <SPI_CLK_EN>

	temp |=(SPI_handle->SPI_config.Mode<<2); //master or slave config
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	791b      	ldrb	r3, [r3, #4]
 800095a:	b2db      	uxtb	r3, r3
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4313      	orrs	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]

	if(SPI_handle->SPI_config.Bus_config == DUPLEX)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	795b      	ldrb	r3, [r3, #5]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	d108      	bne.n	8000982 <SPI_init+0x40>
	{
	 temp &= ~(1<<10); //full duplex write 0 to 10th bit
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000976:	60fb      	str	r3, [r7, #12]
	 temp &= ~(1<<15);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	e00d      	b.n	800099e <SPI_init+0x5c>

	}
	else if(SPI_handle->SPI_config.Bus_config == HALF_DUPLEX)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	795b      	ldrb	r3, [r3, #5]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b01      	cmp	r3, #1
 800098a:	d008      	beq.n	800099e <SPI_init+0x5c>
	{
		 temp |= (0<<15); // 1 line BIDI mode
	}
	else if(SPI_handle->SPI_config.Bus_config == SIMPLEX_RX_ONLY){
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	795b      	ldrb	r3, [r3, #5]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b02      	cmp	r3, #2
 8000994:	d103      	bne.n	800099e <SPI_init+0x5c>
		//simple tx mode is basically full duplex with rx disconnected!

		temp |= (1<<10); //RX only mode
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800099c:	60fb      	str	r3, [r7, #12]
	}


	//DFF
	temp |=(SPI_handle->SPI_config.DFF<<11); // set if 16 bit
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	799b      	ldrb	r3, [r3, #6]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	02db      	lsls	r3, r3, #11
 80009a6:	461a      	mov	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]

	//CPOL
	temp |= SPI_handle->SPI_config.CPOL<<1;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	7a1b      	ldrb	r3, [r3, #8]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]

	//CPHA
	temp |= SPI_handle->SPI_config.CPHA<<0;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	79db      	ldrb	r3, [r3, #7]
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	461a      	mov	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]

	//SPEED
	temp |= SPI_handle->SPI_config.speed<<3;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	7a9b      	ldrb	r3, [r3, #10]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4313      	orrs	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]

	//SSM
	temp |= SPI_handle->SPI_config.SSM<<9;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	7a5b      	ldrb	r3, [r3, #9]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	025b      	lsls	r3, r3, #9
 80009e4:	461a      	mov	r2, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]


	SPI_handle->pSPIx->CR1 = temp; // set CR1 with the init values
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	601a      	str	r2, [r3, #0]
	SPI_ssi_en(SPI_handle,ENABLE);
 80009f4:	2101      	movs	r1, #1
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ff84 	bl	8000904 <SPI_ssi_en>
	SPI_handle->pSPIx->CR1 |= (1<<6); //set spe to enable SPI
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a0a:	601a      	str	r2, [r3, #0]




}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <SPI_txData_IT>:



//interrupt functions
//page 898
uint8_t SPI_txData_IT(SPI_handle_t* SPI_handle,uint8_t *TxBuffer,uint32_t len){
 8000a14:	b480      	push	{r7}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]

	uint8_t state = SPI_handle->TxState;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	7f1b      	ldrb	r3, [r3, #28]
 8000a24:	75fb      	strb	r3, [r7, #23]

	if(SPI_handle->RxState==SPI_IDLE)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	7f5b      	ldrb	r3, [r3, #29]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d113      	bne.n	8000a56 <SPI_txData_IT+0x42>
	{
		SPI_handle->TxBuffer=TxBuffer; //save in handle structure
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	60da      	str	r2, [r3, #12]
		SPI_handle->Txlen = len; //save length
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	615a      	str	r2, [r3, #20]
		SPI_handle->TxState = SPI_BSY_TX; //mark it as busy
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	771a      	strb	r2, [r3, #28]

		//enable TXIE
		SPI_handle->pSPIx->CR2 |= (1<<7); // 7 is TXIE bit
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a4e:	605a      	str	r2, [r3, #4]
		state = SPI_handle->TxState;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	7f1b      	ldrb	r3, [r3, #28]
 8000a54:	75fb      	strb	r3, [r7, #23]
	}

	return state;
 8000a56:	7dfb      	ldrb	r3, [r7, #23]

}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	371c      	adds	r7, #28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <SPI_IRQHadling>:

	return state;

}

void SPI_IRQHadling(SPI_handle_t* SPI_handle){
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
	uint8_t temp1=0,temp2=0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	73fb      	strb	r3, [r7, #15]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	73bb      	strb	r3, [r7, #14]

	temp1 = SPI_handle->pSPIx->CR2 & (1<<7); //TXIE flag check 1 if not masked(ENable)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a7e:	73fb      	strb	r3, [r7, #15]
	temp2 = SPI_handle->pSPIx->SR & (1<<1); //TXE bit check 1 empty , 0 not emty
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	f003 0302 	and.w	r3, r3, #2
 8000a8c:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2 ){
 8000a8e:	7bfb      	ldrb	r3, [r7, #15]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d005      	beq.n	8000aa0 <SPI_IRQHadling+0x3e>
 8000a94:	7bbb      	ldrb	r3, [r7, #14]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d002      	beq.n	8000aa0 <SPI_IRQHadling+0x3e>
		//if TXIE enabled/unmaked and TXE empty then
		//call Tx interrupt handle function

		SPI_tx_handle(SPI_handle);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f862 	bl	8000b64 <SPI_tx_handle>

	}

	temp1 = SPI_handle->pSPIx->CR2 & (1<<6); //RXNEIE flag check 1 if not masked(ENable)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aac:	73fb      	strb	r3, [r7, #15]
	temp2 = SPI_handle->pSPIx->SR & (1<<0); //RXNE bit check 0 empty , 1 not emty
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2 ){
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d005      	beq.n	8000ace <SPI_IRQHadling+0x6c>
 8000ac2:	7bbb      	ldrb	r3, [r7, #14]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <SPI_IRQHadling+0x6c>
		//if RXNEIE enabled/unmasked and RXNE not empty(data arrived!)
		//call Rx interrupt handle function

		SPI_rx_handle(SPI_handle);
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f000 f887 	bl	8000bdc <SPI_rx_handle>

	}

	temp1 = SPI_handle->pSPIx->CR2 & (1<<5); //EERIE flag check
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f003 0320 	and.w	r3, r3, #32
 8000ada:	73fb      	strb	r3, [r7, #15]
	temp2 = SPI_handle->pSPIx->SR & (1<<6); //OVF flag 1 - overrun error else 0
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ae8:	73bb      	strb	r3, [r7, #14]

	if(temp1 && temp2 ){
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d005      	beq.n	8000afc <SPI_IRQHadling+0x9a>
 8000af0:	7bbb      	ldrb	r3, [r7, #14]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d002      	beq.n	8000afc <SPI_IRQHadling+0x9a>
		//if RXNEIE enabled/unmasked and RXNE not empty(data arrived!)
		//call Rx interrupt handle function

		SPI_err_handle(SPI_handle);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f000 f89f 	bl	8000c3a <SPI_err_handle>

	}

}
 8000afc:	bf00      	nop
 8000afe:	3710      	adds	r7, #16
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <SPI_IRQConfig>:



void SPI_IRQConfig(SPI_handle_t* SPI_handle,uint8_t flag){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	70fb      	strb	r3, [r7, #3]

	uint8_t temp=0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]

	if(SPI_handle->pSPIx == SPI1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <SPI_IRQConfig+0x54>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d102      	bne.n	8000b24 <SPI_IRQConfig+0x20>
		temp = SPI1_NVIC;
 8000b1e:	2323      	movs	r3, #35	; 0x23
 8000b20:	73fb      	strb	r3, [r7, #15]
 8000b22:	e00e      	b.n	8000b42 <SPI_IRQConfig+0x3e>
	else if(SPI_handle->pSPIx == SPI2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <SPI_IRQConfig+0x58>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d102      	bne.n	8000b34 <SPI_IRQConfig+0x30>
		temp = SPI2_NVIC;
 8000b2e:	2324      	movs	r3, #36	; 0x24
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	e006      	b.n	8000b42 <SPI_IRQConfig+0x3e>
	else if(SPI_handle->pSPIx == SPI3)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <SPI_IRQConfig+0x5c>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d108      	bne.n	8000b50 <SPI_IRQConfig+0x4c>
		temp = SPI3_NVIC;
 8000b3e:	2333      	movs	r3, #51	; 0x33
 8000b40:	73fb      	strb	r3, [r7, #15]
	else
		return;

	GPIO_IRQConfig(temp,flag);
 8000b42:	78fa      	ldrb	r2, [r7, #3]
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	4611      	mov	r1, r2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fdc3 	bl	80006d4 <GPIO_IRQConfig>
 8000b4e:	e000      	b.n	8000b52 <SPI_IRQConfig+0x4e>
		return;
 8000b50:	bf00      	nop

}
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40013000 	.word	0x40013000
 8000b5c:	40003800 	.word	0x40003800
 8000b60:	40003c00 	.word	0x40003c00

08000b64 <SPI_tx_handle>:

	GPIO_IRQPriority(temp,priority);
}


static void SPI_tx_handle(SPI_handle_t* SPI_handle){ //handle tx interrupt
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

	while(SPI_handle->Txlen)
 8000b6c:	e027      	b.n	8000bbe <SPI_tx_handle+0x5a>
	{
	if( (SPI_handle->pSPIx->CR1 & (1<<11)) == 0){
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d110      	bne.n	8000b9e <SPI_tx_handle+0x3a>
				//8 bit DFF
				SPI_handle->pSPIx->DR =*SPI_handle->TxBuffer;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	781a      	ldrb	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	60da      	str	r2, [r3, #12]
				SPI_handle->Txlen--;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	1e5a      	subs	r2, r3, #1
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	615a      	str	r2, [r3, #20]
				SPI_handle->TxBuffer++;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	e00f      	b.n	8000bbe <SPI_tx_handle+0x5a>
			}
			else{
				//16 bit DFF

				SPI_handle->pSPIx->DR = *((uint16_t*)SPI_handle->TxBuffer);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	881a      	ldrh	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60da      	str	r2, [r3, #12]
				SPI_handle->Txlen-=2;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	1e9a      	subs	r2, r3, #2
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	615a      	str	r2, [r3, #20]
				SPI_handle->TxBuffer+=2; //send 2 bytes so uint8_t should be incremented by 2 , if typecasted to uint16_t then only one increment
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	1c9a      	adds	r2, r3, #2
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60da      	str	r2, [r3, #12]
	while(SPI_handle->Txlen)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1d3      	bne.n	8000b6e <SPI_tx_handle+0xa>
			}
	}

	if(!SPI_handle->Txlen)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <SPI_tx_handle+0x70>
	{
		//reset TXIE state and TXbuffer and TX length

		SPI_close_tx(SPI_handle);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f862 	bl	8000c98 <SPI_close_tx>
	}

}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <SPI_rx_handle>:

static void SPI_rx_handle(SPI_handle_t* SPI_handle){ //handle rx interrupt
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]


			if( (SPI_handle->pSPIx->CR1 & (1<<11)) == 0){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10c      	bne.n	8000c0c <SPI_rx_handle+0x30>
				//8 bit DFF
				*SPI_handle->RxBuffer = SPI_handle->pSPIx->DR;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	691b      	ldr	r3, [r3, #16]
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	701a      	strb	r2, [r3, #0]
				SPI_handle->Rxlen++;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	619a      	str	r2, [r3, #24]
 8000c0a:	e00b      	b.n	8000c24 <SPI_rx_handle+0x48>

			}
			else{
				//16 bit DFF

				*((uint16_t*)SPI_handle->TxBuffer) = SPI_handle->pSPIx->DR ;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68da      	ldr	r2, [r3, #12]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	b292      	uxth	r2, r2
 8000c18:	801a      	strh	r2, [r3, #0]
				SPI_handle->Rxlen+=2;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	1c9a      	adds	r2, r3, #2
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	619a      	str	r2, [r3, #24]

			}

			if(!SPI_handle->Rxlen)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <SPI_rx_handle+0x56>
				{
					//reset TXIE state and RXbuffer and RX length
				SPI_close_rx(SPI_handle);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 f84a 	bl	8000cc6 <SPI_close_rx>
				}


}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <SPI_err_handle>:
static void SPI_err_handle(SPI_handle_t* SPI_handle){ //handle errors during SPI interrupt
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
	// only overrun error is applicable
	//clear ovf flag

	if(SPI_handle->TxState != SPI_BSY_TX )
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7f1b      	ldrb	r3, [r3, #28]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d002      	beq.n	8000c50 <SPI_err_handle+0x16>
	{
		//clear ovf flag page 914
		SPI_clr_ovrflag(SPI_handle);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f000 f813 	bl	8000c76 <SPI_clr_ovrflag>

	}
	//if SPI TX busy handle OVF flag by notifying
	SPI_ErrEvent(SPI_handle,SPI_ERR_OVF);
 8000c50:	2103      	movs	r1, #3
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 f804 	bl	8000c60 <SPI_ErrEvent>


}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <SPI_ErrEvent>:

__attribute__((weak)) void SPI_ErrEvent(SPI_handle_t* SPI_handle,uint8_t flag){
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	70fb      	strb	r3, [r7, #3]


}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <SPI_clr_ovrflag>:


void SPI_clr_ovrflag(SPI_handle_t* SPI_handle){
 8000c76:	b480      	push	{r7}
 8000c78:	b085      	sub	sp, #20
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]

	uint32_t temp1 = SPI_handle->pSPIx->DR; //read DR
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60fb      	str	r3, [r7, #12]
	temp1 = SPI_handle->pSPIx->SR; //read SR
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	60fb      	str	r3, [r7, #12]
	(void) temp1;
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <SPI_close_tx>:

void SPI_close_tx(SPI_handle_t* SPI_handle){
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

	SPI_handle->pSPIx->CR2 = ~(1<<7); //reset TXIE to mask
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000ca8:	605a      	str	r2, [r3, #4]
	SPI_handle->TxBuffer=NULL;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
	SPI_handle->Txlen = 0;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	615a      	str	r2, [r3, #20]
	SPI_handle->TxState = SPI_IDLE;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	771a      	strb	r2, [r3, #28]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <SPI_close_rx>:

void SPI_close_rx(SPI_handle_t* SPI_handle){
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]

	//reset TXIE state and RXbuffer and RX length
	SPI_handle->pSPIx->CR2 = ~(1<<6); //reset RXIE to mask
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000cd6:	605a      	str	r2, [r3, #4]
	SPI_handle->RxBuffer=NULL;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
	SPI_handle->Rxlen = 0;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
	SPI_handle->RxState = SPI_IDLE;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	775a      	strb	r2, [r3, #29]

}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <__libc_init_array>:
 8000cf4:	b570      	push	{r4, r5, r6, lr}
 8000cf6:	4d0d      	ldr	r5, [pc, #52]	; (8000d2c <__libc_init_array+0x38>)
 8000cf8:	4c0d      	ldr	r4, [pc, #52]	; (8000d30 <__libc_init_array+0x3c>)
 8000cfa:	1b64      	subs	r4, r4, r5
 8000cfc:	10a4      	asrs	r4, r4, #2
 8000cfe:	2600      	movs	r6, #0
 8000d00:	42a6      	cmp	r6, r4
 8000d02:	d109      	bne.n	8000d18 <__libc_init_array+0x24>
 8000d04:	4d0b      	ldr	r5, [pc, #44]	; (8000d34 <__libc_init_array+0x40>)
 8000d06:	4c0c      	ldr	r4, [pc, #48]	; (8000d38 <__libc_init_array+0x44>)
 8000d08:	f000 f818 	bl	8000d3c <_init>
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	10a4      	asrs	r4, r4, #2
 8000d10:	2600      	movs	r6, #0
 8000d12:	42a6      	cmp	r6, r4
 8000d14:	d105      	bne.n	8000d22 <__libc_init_array+0x2e>
 8000d16:	bd70      	pop	{r4, r5, r6, pc}
 8000d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d1c:	4798      	blx	r3
 8000d1e:	3601      	adds	r6, #1
 8000d20:	e7ee      	b.n	8000d00 <__libc_init_array+0xc>
 8000d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d26:	4798      	blx	r3
 8000d28:	3601      	adds	r6, #1
 8000d2a:	e7f2      	b.n	8000d12 <__libc_init_array+0x1e>
 8000d2c:	08000d60 	.word	0x08000d60
 8000d30:	08000d60 	.word	0x08000d60
 8000d34:	08000d60 	.word	0x08000d60
 8000d38:	08000d64 	.word	0x08000d64

08000d3c <_init>:
 8000d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3e:	bf00      	nop
 8000d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d42:	bc08      	pop	{r3}
 8000d44:	469e      	mov	lr, r3
 8000d46:	4770      	bx	lr

08000d48 <_fini>:
 8000d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4a:	bf00      	nop
 8000d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d4e:	bc08      	pop	{r3}
 8000d50:	469e      	mov	lr, r3
 8000d52:	4770      	bx	lr
